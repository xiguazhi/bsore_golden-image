name: 'Terraform'
on:
  push:
    branches:
    - main
  pull_request:
env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_CLIENT_ID }}"
jobs:
  terraform-dev:
    name: 'Terraform'
    runs-on: self-hosted
    working-directory: ./dev
    environment: dev
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform format
      run: terraform fmt -check
    
    - name: Terraform validate
      run: terraform validate

    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var "vsphere_password=${{ secrets.vsphere_password }}" -var "vsphere_user=${{ secrets.vsphere_user }}" 

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir="./${{ secrets.ENVIRONMENT }}" apply -auto-approve -var "vsphere_password=${{ secrets.vsphere_password }}" -var "vsphere_user=${{ secrets.vsphere_user }}"